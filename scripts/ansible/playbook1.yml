---
- name: Setup OVS and Multipass VMs
  hosts: control
  become: true
  vars_files:
    - vars.yml

  tasks:
    # This will install the packages wer needed
    - name: Install required packages
      apt:
        name:
          - openvswitch-switch
          - openvswitch-common
          - multipass
          - bridge-utils
        state: present
        update_cache: yes
        failed_when: false
        register: pkg_status
        changed_when: pkg_status.changed

    # Creating OVS bridge to act as vswitch
    - name: Create OVS bridge
      command: ovs-vsctl add-br {{ ovs_bridge }}
      changed_when: false
      register: ovs_bridge_create
      failed_when: false

    # Setting the bridge up to connect different vms on it
    - name: Bring up OVS bridge
      command: ip link set {{ ovs_bridge }} up
      changed_when: false

    # Creating different multipass vm
    - name: Create Multipass instances
      command: |
        multipass launch --name {{ item.name }} \
        --cpus {{ item.cpus }} \
        --mem {{ item.mem }} \
        --disk {{ item.disk }}
      loop: "{{ vlan_config.vlan100.vms + vlan_config.vlan200.vms }}"
      register: multipass_launch
      changed_when: multipass_launch.rc == 0

    - name: Get Multipass instance network info
      command: multipass info {{ item.name }}
      loop: "{{ vlan_config.vlan100.vms + vlan_config.vlan200.vms }}"
      register: multipass_info

    - name: Extract MAC addresses
      set_fact:
        vm_macs: |
          {% set macs = {} %}
          {% for info in multipass_info.results %}
            {% set vm_name = info.item.name %}
            {% set mac = info.stdout | regex_search('MAC:\s+([a-f0-9:]+)') %}
            {% if mac %}
              {% set _ = macs.update({vm_name: mac[1]}) %}
            {% endif %}
          {% endfor %}
          {{ macs }}
      changed_when: false

    - name: Create OVS ports with VLANs
      command: |
        ovs-vsctl add-port {{ ovs_bridge }} {{ item.name }}-port \
        tag={{ item.vlan }} \
        -- set interface {{ item.name }}-port \
        type=internal
      loop: "{{ vlan_config.vlan100.vms + vlan_config.vlan200.vms }}"

    - name: Configure VLAN interfaces
      command: |
        ip link set {{ item.name }}-port up && \
        dhclient {{ item.name }}-port
      loop: "{{ vlan_config.vlan100.vms + vlan_config.vlan200.vms }}"

    - name: Show final OVS configuration
      command: ovs-vsctl show
      register: ovs_show

    - name: Display OVS configuration
      debug:
        var: ovs_show.stdout

- name: Configure future nodes (placeholder)
  hosts: unconfigured_nodes
  gather_facts: false
  tasks:
    - name: Placeholder for future node configuration
      debug:
        msg: "This node will be configured later - {{ inventory_hostname }}"
