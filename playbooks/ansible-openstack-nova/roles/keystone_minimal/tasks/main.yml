---
- name: Install Keystone and OpenStack client packages
  ansible.builtin.apt:
    name:
      - keystone
      - python3-openstackclient
    state: present
    update_cache: yes
  register: apt_result
  retries: 3
  delay: 5
  until: apt_result is success
  notify: Restart apache2
  when: inventory_hostname == 'controller'

- name: Check if MariaDB Unix socket exists
  ansible.builtin.stat:
    path: /var/run/mysqld/mysqld.sock
  register: keystone_mysql_socket_stat
  failed_when: not keystone_mysql_socket_stat.stat.exists
  when: inventory_hostname == 'controller'

- name: Create Keystone database
  community.mysql.mysql_db:
    name: "{{ keystone_db_name }}"
    state: present
    login_user: root
    login_unix_socket: /var/run/mysqld/mysqld.sock
  become: yes
  when: inventory_hostname == 'controller' and keystone_mysql_socket_stat.stat.exists

- name: Grant privileges to Keystone database user
  community.mysql.mysql_user:
    name: "{{ openstack_db_user }}"
    password: "{{ openstack_db_password }}"
    host: "%"
    priv: "{{ keystone_db_name }}.*:ALL"
    state: present
    login_user: root
    login_unix_socket: /var/run/mysqld/mysqld.sock
  become: yes
  when: inventory_hostname == 'controller' and keystone_mysql_socket_stat.stat.exists

- name: Remove residual SQLite database files # NEW: Clean up old SQLite DB and config directory
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/keystone/keystone.db
    - /etc/keystone/keystone.conf.d # Ensure this is removed if it's an old directory
  when: inventory_hostname == 'controller'

- name: Configure Keystone database connection
  ansible.builtin.template:
    src: keystone.conf.j2
    dest: /etc/keystone/keystone.conf
    owner: keystone
    group: keystone
    mode: '0640'
  notify: Restart apache2
  when: inventory_hostname == 'controller'

- name: Debug Keystone configuration
  ansible.builtin.command:
    cmd: cat /etc/keystone/keystone.conf
  register: keystone_conf_content
  changed_when: false
  when: inventory_hostname == 'controller'

- name: Display Keystone configuration
  ansible.builtin.debug:
    msg: "{{ keystone_conf_content.stdout_lines }}"
  when: inventory_hostname == 'controller'

- name: Verify Keystone database connectivity
  ansible.builtin.command:
    cmd: mysql -u "{{ openstack_db_user }}" -p"{{ openstack_db_password }}" -h localhost -e "SELECT 1 FROM information_schema.tables WHERE table_schema='{{ keystone_db_name }}'"
  register: db_connect_result
  changed_when: false
  failed_when: db_connect_result.rc != 0
  retries: 3
  delay: 5
  until: db_connect_result is success
  when: inventory_hostname == 'controller'

- name: Populate the Keystone database
  ansible.builtin.command:
    cmd: keystone-manage --config-file /etc/keystone/keystone.conf db_sync
    creates: /etc/keystone/db_synced
  become: yes
  become_user: keystone
  environment:
    OSLO_CONFIG_FILE: /etc/keystone/keystone.conf
    PYTHONPATH: /usr/lib/python3/dist-packages # NEW: Explicitly set PYTHONPATH for keystone-manage
  register: keystone_db_sync_result
  retries: 5 # Increased retries
  delay: 10 # Increased delay
  until: keystone_db_sync_result is success
  when: inventory_hostname == 'controller'
  notify: Mark db_sync complete

- name: Ensure Fernet keys directory exists # NEW: Create directory for Fernet keys
  ansible.builtin.file:
    path: /etc/keystone/fernet-keys
    state: directory
    owner: keystone
    group: keystone
    mode: '0750'
  when: inventory_hostname == 'controller'

- name: Initialize Fernet keys
  ansible.builtin.command:
    cmd: keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone # UPDATED: Added --keystone-group
    creates: /etc/keystone/fernet-keys/0
  become: yes
  become_user: keystone
  when: inventory_hostname == 'controller'

- name: Ensure credential keys directory exists # NEW: Create directory for credential keys
  ansible.builtin.file:
    path: /etc/keystone/credential-keys
    state: directory
    owner: keystone
    group: keystone
    mode: '0750'
  when: inventory_hostname == 'controller'

- name: Initialize Barbican keys for token encryption
  ansible.builtin.command:
    cmd: keystone-manage credential_setup --keystone-user keystone --keystone-group keystone # UPDATED: Added --keystone-group
    creates: /etc/keystone/credential-keys/0
  become: yes
  become_user: keystone
  when: inventory_hostname == 'controller'

- name: Bootstrap Keystone
  ansible.builtin.command:
    cmd: >
      keystone-manage bootstrap
      --bootstrap-password "{{ openstack_admin_password }}"
      --bootstrap-admin-url "{{ keystone_admin_url }}"
      --bootstrap-public-url "{{ keystone_public_url }}"
      --bootstrap-internal-url "{{ keystone_internal_url }}"
      --bootstrap-region-id "{{ openstack_region_name }}"
    creates: /etc/keystone/bootstrap_complete
  become: yes
  become_user: keystone
  environment:
    OS_CLOUD: "" # Ensure no existing cloud env vars interfere
  when: inventory_hostname == 'controller'

- name: Ensure Apache2 is installed and running
  ansible.builtin.apt:
    name: apache2
    state: present
    update_cache: yes
  register: apt_result
  retries: 3
  delay: 5
  until: apt_result is success
  notify: Restart apache2
  when: inventory_hostname == 'controller'

- name: Configure Apache2 ServerName
  ansible.builtin.lineinfile:
    path: /etc/apache2/apache2.conf
    regexp: '^ServerName'
    line: "ServerName {{ inventory_hostname }}"
    state: present
  notify: Restart apache2
  when: inventory_hostname == 'controller'

- name: Enable Keystone WSGI in Apache2
  ansible.builtin.file:
    src: /usr/share/keystone/wsgi-keystone.conf
    dest: /etc/apache2/conf-enabled/wsgi-keystone.conf
    state: link
  notify: Restart apache2
  when: inventory_hostname == 'controller'

- name: Create admin-openrc.sh file on controller
  ansible.builtin.template:
    src: admin-openrc.sh.j2
    dest: /root/admin-openrc.sh
    owner: root
    group: root
    mode: '0600'
  when: inventory_hostname == 'controller'

