---
# Tasks for validating the Nova deployment.
# These tasks will primarily run on the controller node, as it has access to the OpenStack CLI.

- name: Source admin-openrc.sh for OpenStack CLI environment
  ansible.builtin.shell: |
    source /root/admin-openrc.sh
    echo "OS_AUTH_URL=$OS_AUTH_URL"
    echo "OS_USERNAME=$OS_USERNAME"
    echo "OS_PROJECT_NAME=$OS_PROJECT_NAME"
  args:
    executable: /bin/bash
  register: openrc_output
  changed_when: false
  when: inventory_hostname in groups['controllers']
  # This task is primarily for debugging and ensuring the environment variables are set.
  # The openstack_cli_config in group_vars will be used by openstack modules.

- name: Verify Nova services are running on controller
  ans.builtin.service_facts:
  - name: nova-api
    state: started
  - name: nova-scheduler
    state: started
  - name: nova-conductor
    state: started
  - name: nova-novncproxy
    state: started
  - name: nova-consoleproxy
    state: started
  when: inventory_hostname in groups['controllers']

- name: Verify Nova compute service and libvirtd are running on compute node
  ans.builtin.service_facts:
  - name: nova-compute
    state: started
  - name: libvirtd
    state: started
  when: inventory_hostname in groups['computes']

- name: Verify Nova endpoints are registered in Keystone
  community.general.openstack.openstack_service_info:
    cloud: "{{ openstack_cloud_config }}"
    service: compute
  register: nova_service_info
  when: inventory_hostname in groups['controllers']
  failed_when: not nova_service_info.openstack_service or not nova_service_info.openstack_service.endpoints
  environment:
    OS_CLOUD: ""

- name: Display Nova service and endpoint info
  ansible.builtin.debug:
    msg: "Nova service info: {{ nova_service_info.openstack_service }}"
  when: inventory_hostname in groups['controllers'] and nova_service_info is defined

- name: Check OpenStack service list (general health check)
  ansible.builtin.command: openstack service list
  register: service_list_output
  changed_when: false
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: "{{ openstack_cloud_config }}"

- name: Display OpenStack service list
  ansible.builtin.debug:
    msg: "{{ service_list_output.stdout }}"
  when: inventory_hostname in groups['controllers']

- name: Check OpenStack endpoint list (general health check)
  ansible.builtin.command: openstack endpoint list
  register: endpoint_list_output
  changed_when: false
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: "{{ openstack_cloud_config }}"

- name: Display OpenStack endpoint list
  ansible.builtin.debug:
    msg: "{{ endpoint_list_output.stdout }}"
  when: inventory_hostname in groups['controllers']

- name: Check Nova service status (nova service-list)
  ansible.builtin.command: openstack compute service list
  register: nova_service_status
  changed_when: false
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: "{{ openstack_cloud_config }}"

- name: Display Nova service status
  ansible.builtin.debug:
    msg: "{{ nova_service_status.stdout }}"
  when: inventory_hostname in groups['controllers']

- name: Ensure all Nova services are 'up'
  ansible.builtin.assert:
    that:
      - "' down ' not in nova_service_status.stdout"
      - "'XXX' not in nova_service_status.stdout" # Check for disabled services
    fail_msg: "One or more Nova services are down or disabled!"
    success_msg: "All Nova services are up and enabled."
  when: inventory_hostname in groups['controllers']

- name: Download CirrOS image (if not already present)
  ansible.builtin.get_url:
    url: "{{ cirros_image_url }}"
    dest: "/tmp/{{ cirros_image_name }}"
    mode: '0644'
  register: cirros_download
  until: cirros_download is success
  retries: 5
  delay: 10
  when: inventory_hostname in groups['controllers']

- name: Upload CirrOS image to Glance
  community.general.openstack.openstack_image:
    cloud: "{{ openstack_cloud_config }}"
    state: present
    name: "{{ cirros_image_glance_name }}"
    filename: "/tmp/{{ cirros_image_name }}"
    disk_format: qcow2
    container_format: bare
    is_public: yes
  register: cirros_upload
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: ""

- name: Create a test network
  community.general.openstack.openstack_network:
    cloud: "{{ openstack_cloud_config }}"
    state: present
    name: "{{ test_network_name }}"
    provider_physical_network: "{{ test_physical_network }}" # Assuming provider network for simplicity
    provider_network_type: flat # Or vxlan, gre, etc. based on your Neutron setup
    shared: yes
  register: test_network
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: ""

- name: Create a test subnet
  community.general.openstack.openstack_subnet:
    cloud: "{{ openstack_cloud_config }}"
    state: present
    network_name: "{{ test_network_name }}"
    name: "{{ test_subnet_name }}"
    cidr: "{{ test_subnet_cidr }}"
    gateway_ip: "{{ test_subnet_gateway }}"
    dns_nameservers: "{{ test_dns_nameservers }}"
    enable_dhcp: yes
  register: test_subnet
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: ""

- name: Create a test security group to allow SSH and ICMP
  community.general.openstack.openstack_security_group:
    cloud: "{{ openstack_cloud_config }}"
    state: present
    name: "{{ test_security_group_name }}"
    description: "Security group for test VMs (SSH and ICMP)"
  register: test_security_group
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: ""

- name: Add SSH rule to test security group
  community.general.openstack.openstack_security_group_rule:
    cloud: "{{ openstack_cloud_config }}"
    state: present
    security_group: "{{ test_security_group_name }}"
    direction: ingress
    protocol: tcp
    port_range_min: 22
    port_range_max: 22
    remote_ip_prefix: 0.0.0.0/0
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: ""

- name: Add ICMP rule to test security group
  community.general.openstack.openstack_security_group_rule:
    cloud: "{{ openstack_cloud_config }}"
    state: present
    security_group: "{{ test_security_group_name }}"
    direction: ingress
    protocol: icmp
    remote_ip_prefix: 0.0.0.0/0
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: ""

- name: Generate SSH key pair for instance access
  community.general.openstack.openstack_keypair:
    cloud: "{{ openstack_cloud_config }}"
    state: present
    name: "{{ test_keypair_name }}"
    public_key_file: "~/.ssh/id_rsa.pub" # Assumes a public key exists on the Ansible control host
    private_key_file: "/tmp/{{ test_keypair_name }}.pem" # Save private key on controller for later use
    type: ssh
  register: test_keypair
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: ""

- name: Set permissions for private key file
  ansible.builtin.file:
    path: "/tmp/{{ test_keypair_name }}.pem"
    mode: '0600'
  when: inventory_hostname in groups['controllers']

- name: Launch a test instance
  community.general.openstack.openstack_server:
    cloud: "{{ openstack_cloud_config }}"
    state: present
    name: "{{ test_instance_name }}"
    image: "{{ cirros_image_glance_name }}"
    flavor: "{{ test_flavor_name }}"
    network: "{{ test_network_name }}"
    security_groups:
      - "{{ test_security_group_name }}"
    key_name: "{{ test_keypair_name }}"
    wait: yes
    timeout: 300 # Wait up to 5 minutes for instance to become active
  register: test_instance
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: ""

- name: Get instance floating IP (if using one, otherwise use fixed IP)
  community.general.openstack.openstack_floating_ip_info:
    cloud: "{{ openstack_cloud_config }}"
    filters:
      fixed_ip_address: "{{ test_instance.openstack.private_v4 }}"
  register: instance_floating_ip_info
  when: inventory_hostname in groups['controllers'] and test_instance.openstack.private_v4 is defined
  environment:
    OS_CLOUD: ""

- name: Assign floating IP to instance (if needed)
  community.general.openstack.openstack_floating_ip:
    cloud: "{{ openstack_cloud_config }}"
    state: present
    floating_ip_address: "{{ instance_floating_ip_info.openstack_floating_ips[0].floating_ip_address }}"
    server: "{{ test_instance_name }}"
  when: inventory_hostname in groups['controllers'] and instance_floating_ip_info.openstack_floating_ips | length > 0
  environment:
    OS_CLOUD: ""

- name: Get instance details for IP address
  community.general.openstack.openstack_server_info:
    cloud: "{{ openstack_cloud_config }}"
    server: "{{ test_instance_name }}"
  register: instance_details
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: ""

- name: Extract instance IP address for ping test
  ansible.builtin.set_fact:
    instance_ip: "{{ instance_details.openstack_servers[0].addresses[test_network_name][0].addr }}"
  when: inventory_hostname in groups['controllers'] and instance_details.openstack_servers[0].addresses is defined

- name: Ping the launched instance to verify network connectivity
  ansible.builtin.wait_for_connection:
    host: "{{ instance_ip }}"
    port: 22 # Assuming SSH is open and the instance responds to SSH
    delay: 10
    timeout: 180
  when: inventory_hostname in groups['controllers'] and instance_ip is defined

- name: Ping test successful
  ansible.builtin.debug:
    msg: "Successfully launched and pinged the test instance {{ test_instance_name }} at {{ instance_ip }}! Nova deployment is functional."
  when: inventory_hostname in groups['controllers']

- name: "Clean up: Delete test instance"
  community.general.openstack.openstack_server:
    cloud: "{{ openstack_cloud_config }}"
    state: absent
    name: "{{ test_instance_name }}"
    wait: yes
    timeout: 180
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: ""

- name: "Clean up: Delete test keypair"
  community.general.openstack.openstack_keypair:
    cloud: "{{ openstack_cloud_config }}"
    state: absent
    name: "{{ test_keypair_name }}"
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: ""

- name: "Clean up: Delete test security group"
  community.general.openstack.openstack_security_group:
    cloud: "{{ openstack_cloud_config }}"
    state: absent
    name: "{{ test_security_group_name }}"
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: ""

- name: "Clean up: Delete test subnet"
  community.general.openstack.openstack_subnet:
    cloud: "{{ openstack_cloud_config }}"
    state: absent
    name: "{{ test_subnet_name }}"
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: ""

- name: "Clean up: Delete test network"
  community.general.openstack.openstack_network:
    cloud: "{{ openstack_cloud_config }}"
    state: absent
    name: "{{ test_network_name }}"
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: ""

- name: "Clean up: Delete CirrOS image from Glance"
  community.general.openstack.openstack_image:
    cloud: "{{ openstack_cloud_config }}"
    state: absent
    name: "{{ cirros_image_glance_name }}"
  when: inventory_hostname in groups['controllers']
  environment:
    OS_CLOUD: ""
